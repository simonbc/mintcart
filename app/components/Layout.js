import Head from "next/head";
import Link from "next/link";

import { useRouter } from "next/router";

import React, { useCallback, useMemo } from "react";
import { styled } from "@stitches/react";

import {
  useAddress,
  useChainId,
  useConnect,
  useDisconnect,
  useDisplayAddress,
  Web3Provider,
} from "../context/Web3Context";

import { networkNameById } from "../constants";

const DRAWER_WIDTH = 250;
const HEADER_HEIGHT = 64;
const PAGE_MARGIN = 64;

const Layout = ({ pageTitle, children }) => {
  const router = useRouter();
  const tab = useMemo(() => router.asPath.replace(/^\/#?/, ""), [router]);
  const address = useAddress();
  const displayAddress = useDisplayAddress();
  const chainId = useChainId();
  const connectWallet = useConnect();
  const disconnectWallet = useDisconnect();

  return (
    <PageContent>
      <Head>
        <title>NFT Products</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DashboardSidebar>
        <LinkContainer>
          <LogoLink>
            <Link href="/">
              <a>NFT Products</a>
            </Link>
          </LogoLink>
          <Tab to={"products"}>Products</Tab>
          <Tab to={"settings"}>Settings</Tab>
        </LinkContainer>
      </DashboardSidebar>
      <PageHeader>
        {pageTitle && <PageHeaderTitle>{pageTitle}</PageHeaderTitle>}
        <WalletContainer>
          {address ? (
            <>
              {chainId && (
                <NetworkIndicator>{networkNameById[chainId]}</NetworkIndicator>
              )}
              {displayAddress && (
                <AddressLabel>
                  {displayAddress.endsWith(".eth")
                    ? displayAddress
                    : `${displayAddress.slice(0, 6)}...${displayAddress.slice(
                        -4
                      )}`}
                </AddressLabel>
              )}
              <button onClick={disconnectWallet}>Disconnect wallet</button>
            </>
          ) : (
            <button onClick={connectWallet}>Connect wallet</button>
          )}
        </WalletContainer>
      </PageHeader>
      <PageMain>{children}</PageMain>
    </PageContent>
  );
};

const TabContainer = styled("div", {
  margin: "12px 0",
  cursor: "pointer",
  textTransform: "uppercase",
  fontWeight: 600,
  fontSize: "16px",
  lineHeight: "20.8px",
  variants: {
    active: {
      true: {
        color: "$wheat",
      },
      false: {
        color: "$sand",
      },
    },
  },
});

const Tab = ({ children, to }) => {
  const router = useRouter();
  const tab = useMemo(() => router.asPath.replace(/^\/#?/, ""), [router]);
  const onClick = useCallback(() => router.push(`/${to}`), [router, to]);
  return (
    <TabContainer active={tab === to} onClick={onClick}>
      {to}
    </TabContainer>
  );
};

const PageContent = styled("div", {
  maxWidth: "1100px",
  backgoundColor: "#f7f7f7",
  padding: `${PAGE_MARGIN}px`,
});

const PageHeader = styled("header", {
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between",
  marginLeft: DRAWER_WIDTH,
  height: HEADER_HEIGHT,
  width: `calc(100% - ${DRAWER_WIDTH}px)`,
});

const PageHeaderTitle = styled("h1", {
  fontWeight: 600,
  fontFamily: "$mono",
  fontSize: 32,
  lineHeight: "41.67px",
});

const PageMain = styled("main", {
  height: `calc(100vh - ${HEADER_HEIGHT + 2 * PAGE_MARGIN}px)`,
  flex: 1,
  display: "flex",
  flexDirection: "column",
  marginLeft: DRAWER_WIDTH,
  padding: `40px 0`,
  width: `calc(100% - 255px)`,
});

const DashboardSidebar = styled("div", {
  width: DRAWER_WIDTH,
  flex: "0 0 auto",
});

const LinkContainer = styled("div", {
  width: DRAWER_WIDTH,
  boxSizing: "border-box",
  background: "white",
  fontFamily: "$mono",
  height: "100%",
  color: "$sand",
  overflowY: "auto",
  display: "flex",
  flexDirection: "column",
  flex: "1 0 auto",
  zIndex: 2,
  position: "fixed",
  top: 0,
  outline: 0,
  left: 0,
  padding: "24px",
});

const LogoLink = styled("div", {
  fontFamily: "$sans",
  fontSize: "32px",
  lineHeight: "48px",
  marginBottom: "24px",
  fontWeight: 600,
  textTransform: "unset",
});

const WalletContainer = styled("div", {
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  flexGrow: 1,
});

const NetworkIndicator = styled("span", {
  height: "27px",
  borderRadius: "13.5px",
  color: "white",
  background: "green",
  padding: "16px",
  marginRight: "16px",
  textTransform: "capitalize",
  fontWeight: 700,

  display: "inline-flex",
  alignItems: "center",
});

const AddressLabel = styled("span", {
  marginRight: "16px",
  fontWeight: 600,
});

export default Layout;
